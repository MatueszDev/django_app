"""
Django settings for DjangoApp project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from django.core.urlresolvers import reverse_lazy

# Import socket to read host name
import socket

#If host name starts with 'travis', set DJANGO_HOST = "testing"
if socket.gethostname().startswith('travis'): 
    DJANGO_HOST = "testing"
# Else If the host ip address starts with '172.' (Heroku server), DJANGO_HOST = "production"
elif socket.gethostbyname(socket.gethostname()).startswith('172.'):
    DJANGO_HOST = "production"
else:
# If host doesn't match, assume it's a development server, set DJANGO_HOST = "development"
    DJANGO_HOST = "development"

    
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 's3ads#sp8tjcopdwfdx+ljr=ugpnrm8*xou4@z%yxg^hn51mp$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


ALLOWED_HOSTS = ['student-notebook.herokuapp.com', 'localhost', '127.0.0.1', 'test-django-pite.herokuapp.com']


LOGIN_REDIRECT_URL = reverse_lazy('main_page')
LOGIN_URL = reverse_lazy('login')
LOGOUT_URL = reverse_lazy('logout')
# Application definition

EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'student.notebook.activation@gmail.com'
EMAIL_HOST_PASSWORD = 'alfabeta'
EMAIL_PORT = 587

INSTALLED_APPS = [
    'grades',
    'notes.apps.NotesConfig',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'user_authentication',
    'django.contrib.admin',
    'kalendar',
    'poll',
    'notice_board',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'django_app/templates'),
                 os.path.join(BASE_DIR, 'user_authentication/templates'),
                 os.path.join(BASE_DIR, 'notes/templates'),
                 os.path.join(BASE_DIR, 'kalendar/templates'),
                 os.path.join(BASE_DIR, 'grades/templates'),
                 os.path.join(BASE_DIR, 'poll/templates'),
                 os.path.join(BASE_DIR, 'notice_board/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# Define DATABASES variable for DJANGO_HOST and all others
if DJANGO_HOST == "production":
    # Use postgresql for live host
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
        }
    }
    import dj_database_url

    DATABASES['default'] =  dj_database_url.config(default='postgres://edsecejjxdbjeo:76359de53471b19c4898f7c81d8d5dcb9e842dc932b3a6a358a8332fcffcda22@ec2-54-83-58-17.compute-1.amazonaws.com:5432/d7r2ne1uotlalc')
else: 
   # Use sqlite for non live host
   DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
  }


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
 
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, 'static'),
    "poll/static/"
)

# User-uploaded files (pictures for notes, files with code, etc.)
MEDIA_ROOT = 'media/'
MEDIA_URL = '/media/'
